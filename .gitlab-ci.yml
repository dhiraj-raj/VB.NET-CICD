variables:
  EXE_RELEASE_FOLDER: 'YourApp\bin\Release'
  MSI_RELEASE_FOLDER: 'Setup\bin\Release'
  TEST_FOLDER: 'Tests\bin\Release'
  DEPLOY_FOLDER: 'P:\Projects\YourApp\Builds'
  NUGET_PATH: 'C:\NuGet\nuget.exe'
  MSBUILD_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\amd64\MSBuild.exe'
  NUNIT_PATH: 'C:\Program Files (x86)\NUnit.org\nunit-console\nunit3-console.exe'

stages:
  - build
  - test
  - deploy



build:
  stage: build
  image: mono:latest
  script:
    - pwd
    - msbuild 
        /p:Configuration="Release"
        /p:Platform="Any CPU" 
        "./vbproject.sln"
  

.test_job:
  stage: test
  only:
    - tags
  script:
    - '& "$env:NUNIT_PATH" ".\$env:TEST_FOLDER\Tests.dll"'  # running NUnit tests
  artifacts:
    when: always  # save test results even when the task fails
    expire_in: 1 week  # save gitlab server space, we copy the files we need to deploy folder later on
    paths:
      - '.\TestResult.xml'  # saving NUnit results to copy to deploy folder
  dependencies:
    - build_job

.deploy_job:
  stage: deploy
  only:
    - tags
  script:
    # Compose a folder for each release based on commit tag.
    # Assuming your tag is Rev1.0.0.1, and your last commit message is 'First commit'
    # the artifact files will be copied to:
    # P:\Projects\YourApp\Builds\Rev1.0.0.1 - First commit\
    - '$commitSubject = git log -1 --pretty=%s'
    - '$deployFolder = $($env:DEPLOY_FOLDER) + "\" + $($env:CI_BUILD_TAG) + " - " + $commitSubject + "\"'

    # xcopy takes care of recursively creating required folders
    - 'xcopy /y ".\$env:EXE_RELEASE_FOLDER\YourApp.exe" "$deployFolder"'
    - 'xcopy /y ".\$env:MSI_RELEASE_FOLDER\YourApp Setup.msi" "$deployFolder"'
    - 'xcopy /y ".\TestResult.xml" "$deployFolder"'
  dependencies:
    - build_job
    - test_job
